{"ast":null,"code":"import _slicedToArray from \"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { newPost, allPosts, registerPost } from '@/services/PostsServices.js';\nimport router from '../../router';\nimport { HTTP } from '../../services/axios';\nexport default {\n  state: {\n    post: null,\n    posts: [],\n    step: 1\n  },\n  mutations: {\n    nextStep: function nextStep(state) {\n      return state.step++;\n    },\n    backStep: function backStep(state) {\n      return state.step--;\n    },\n    RESET_post: function RESET_post(state) {\n      return state.post = newPost();\n    },\n    setStep: function setStep(state, payload) {\n      return state.step = payload;\n    },\n    ADD_Post: function ADD_Post(state, payload) {\n      state.posts.push(payload);\n      router.push('/');\n    },\n    ADD_Comment_Post: function ADD_Comment_Post(state, payload) {\n      state.posts.comments.push(payload.comment);\n    },\n    SET_Posts: function SET_Posts(state, payload) {\n      state.posts = payload;\n    },\n    SET_Post: function SET_Post(state) {\n      state.post = newPost();\n    }\n  },\n  actions: {\n    resetPost: function resetPost(_ref) {\n      var commit = _ref.commit;\n      commit('RESET_post');\n    },\n    nextStep: function nextStep(_ref2) {\n      var commit = _ref2.commit;\n      commit('nextStep');\n    },\n    backStep: function backStep(_ref3) {\n      var commit = _ref3.commit;\n      commit('backStep');\n    },\n    setStep: function setStep(_ref4, data) {\n      var commit = _ref4.commit;\n      commit('setStep', data);\n    },\n    addPost: function addPost(_ref5, data) {\n      var commit = _ref5.commit;\n      var accessInfo = localStorage.getItem('accessInfo');\n      var post = null;\n\n      if (accessInfo != 'undefined' && accessInfo != null) {\n        accessInfo = JSON.parse(accessInfo);\n        var formData = new FormData();\n        Object.entries(data.Post).forEach(function (_ref6) {\n          var _ref7 = _slicedToArray(_ref6, 2),\n              key = _ref7[0],\n              value = _ref7[1];\n\n          return formData.append(key, value);\n        });\n        HTTP.post('posts', formData, {\n          headers: {\n            'Authorization': 'Bearer ' + accessInfo.token,\n            'Content-Type': \"multipart/form-data\"\n          }\n        }).then(function (response) {\n          post = response.data;\n\n          if (data.tags.length > 0) {\n            data.tags.forEach(function (tag) {\n              formData = new FormData();\n              Object.entries(tag).forEach(function (_ref8) {\n                var _ref9 = _slicedToArray(_ref8, 2),\n                    key = _ref9[0],\n                    value = _ref9[1];\n\n                return formData.append(key, value);\n              });\n              HTTP.post('posts/' + post.id + '/tags', formData, {\n                headers: {\n                  'Authorization': 'Bearer ' + accessInfo.token,\n                  'Content-Type': \"multipart/form-data\"\n                }\n              }).then(function (response) {\n                post.tags = response.data;\n              }).catch(function (error) {\n                console.log(error);\n              });\n            });\n          }\n\n          if (data.images.length > 0) {\n            data.images.forEach(function (image) {\n              formData = new FormData();\n              var req = {\n                image: image,\n                size: image.size,\n                name: image.name\n              };\n              Object.entries(req).forEach(function (_ref10) {\n                var _ref11 = _slicedToArray(_ref10, 2),\n                    key = _ref11[0],\n                    value = _ref11[1];\n\n                return formData.append(key, value);\n              });\n              HTTP.post('posts/' + post.id + '/images', formData, {\n                headers: {\n                  'Authorization': 'Bearer ' + accessInfo.token,\n                  'Content-Type': \"multipart/form-data\"\n                }\n              }).then(function (response) {\n                post.images = response.data;\n              }).catch(function (error) {\n                console.log(error);\n              });\n            });\n          }\n\n          commit('ADD_Post', post);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    },\n    getPosts: function getPosts(_ref12) {\n      var commit = _ref12.commit;\n      var accessInfo = localStorage.getItem('accessInfo');\n\n      if (accessInfo != 'undefined' && accessInfo != null) {\n        accessInfo = JSON.parse(accessInfo);\n        HTTP.get('posts', {\n          headers: {\n            'Authorization': 'Bearer ' + accessInfo.token\n          }\n        }).then(function (response) {\n          commit('SET_Posts', response.data);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    },\n    getPost: function getPost(_ref13) {\n      var commit = _ref13.commit;\n      commit('SET_Post');\n    },\n    addCommentPost: function addCommentPost(_ref14, data) {\n      var commit = _ref14.commit;\n      var user = localStorage.getItem('accessInfo');\n\n      if (user != 'undefined' && user != null) {\n        user = JSON.parse(user);\n        var formData = new FormData();\n        Object.entries(data).forEach(function (_ref15) {\n          var _ref16 = _slicedToArray(_ref15, 2),\n              key = _ref16[0],\n              value = _ref16[1];\n\n          return formData.append(key, value);\n        });\n        HTTP.post('posts/' + data.post_id + '/comments', formData, {\n          headers: {\n            'Authorization': 'Bearer ' + user.token,\n            'Content-Type': \"multipart/form-data\"\n          }\n        }).then(function (response) {\n          var result = {\n            comment: response.data,\n            post_id: data.post_id\n          };\n          console.log(result);\n          commit('ADD_Comment_Post', result);\n        }).catch(function (error) {\n          return console.log(error);\n        });\n      }\n    }\n  },\n  getters: {\n    getPost: function getPost(state) {\n      return state.post;\n    },\n    getPosts: function getPosts(state) {\n      return state.posts.sort(function (a, b) {\n        return b.id - a.id;\n      });\n    },\n    getStep: function getStep(state) {\n      return state.step;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/anders/Desktop/work/Vue/Posting-app/src/store/modules/posts.js"],"names":["newPost","allPosts","registerPost","router","HTTP","state","post","posts","step","mutations","nextStep","backStep","RESET_post","setStep","payload","ADD_Post","push","ADD_Comment_Post","comments","comment","SET_Posts","SET_Post","actions","resetPost","commit","data","addPost","accessInfo","localStorage","getItem","JSON","parse","formData","FormData","Object","entries","Post","forEach","key","value","append","headers","token","then","response","tags","length","tag","id","catch","error","console","log","images","image","req","size","name","getPosts","get","getPost","addCommentPost","user","post_id","result","getters","sort","a","b","getStep"],"mappings":"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","sourcesContent":["import {\n    newPost,\n    allPosts,\n    registerPost,\n} from '@/services/PostsServices.js'\nimport router from '../../router'\nimport {\n    HTTP\n} from '../../services/axios'\n\n\n\nexport default {\n    state: {\n        post: null,\n        posts: [],\n        step: 1,\n    },\n\n    mutations: {\n        nextStep: state => state.step++,\n        backStep: state => state.step--,\n        RESET_post: state => state.post = newPost(),\n        setStep: (state, payload) => state.step = payload,\n\n        ADD_Post: (state, payload) => {\n            state.posts.push(payload)\n            router.push('/')\n        },\n        \n        ADD_Comment_Post: (state, payload) => {\n            state.posts\n            .comments.push(payload.comment)\n        },\n\n        SET_Posts: (state, payload) => {\n            state.posts = payload\n        },\n\n        SET_Post: (state) => {\n            state.post = newPost()\n        },\n    },\n    actions: {\n        resetPost({commit}) {\n            commit('RESET_post')\n        },\n        nextStep({commit}) {\n            commit('nextStep')\n        },\n        backStep({commit}) {\n            commit('backStep')\n        },\n        \n        setStep({commit},data) {\n            commit('setStep',data)\n        },\n\n        addPost({commit},data) {\n            let accessInfo = localStorage.getItem('accessInfo')\n            let post=null;\n            if (accessInfo != 'undefined' && accessInfo != null) {\n                accessInfo = JSON.parse(accessInfo)\n                let formData = new FormData()\n                Object.entries(data.Post).forEach(\n                    ([key, value]) => formData.append(key, value)\n                )\n                HTTP.post('posts', formData, {\n                        headers: {\n                            'Authorization': 'Bearer ' + accessInfo.token,\n                            'Content-Type': \"multipart/form-data\",\n                        }\n                    })\n                    .then(response => {\n                        post=response.data\n                        if (data.tags.length > 0) {\n                            data.tags.forEach(tag => {\n                                formData = new FormData()\n                                Object.entries(tag).forEach(\n                                    ([key, value]) => formData.append(key, value)\n                                )\n                                HTTP.post('posts/' + post.id + '/tags', formData, {\n                                        headers: {\n                                            'Authorization': 'Bearer ' + accessInfo.token,\n                                            'Content-Type': \"multipart/form-data\",\n                                        }\n                                    })\n                                    .then(response => {\n                                        post.tags=response.data\n                                    })\n                                    .catch(error => {\n                                        console.log(error)\n                                    })\n                            })\n                        }\n\n                        if (data.images.length > 0) {\n                            data.images.forEach(image => {\n                                formData = new FormData()\n                                const req = {\n                                    image: image,\n                                    size: image.size,\n                                    name: image.name\n                                }\n                                Object.entries(req).forEach(\n                                    ([key, value]) => formData.append(key, value)\n                                )\n                                HTTP.post('posts/' + post.id + '/images', formData, {\n                                        headers: {\n                                            'Authorization': 'Bearer ' + accessInfo.token,\n                                            'Content-Type': \"multipart/form-data\",\n                                        }\n                                    })\n                                    .then(response => {\n                                        post.images=response.data\n                                    })\n                                    .catch(error => {\n                                        console.log(error)\n                                    })\n                            })\n                        }\n                        commit('ADD_Post',post)\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n            }\n        },\n\n        getPosts({\n            commit\n        }) {\n            let accessInfo = localStorage.getItem('accessInfo')\n\n            if (accessInfo != 'undefined' && accessInfo != null) {\n                accessInfo = JSON.parse(accessInfo)\n                HTTP.get('posts', {\n                        headers: {\n                            'Authorization': 'Bearer ' + accessInfo.token,\n                        }\n                    })\n                    .then(response => {\n                        commit('SET_Posts', response.data)\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n            }\n        },\n\n        getPost({commit}){\n            commit('SET_Post')\n        },\n        addCommentPost({commit},data){\n            let user = localStorage.getItem('accessInfo')\n\n            if (user != 'undefined' && user != null) {\n                user = JSON.parse(user)\n                let formData = new FormData()\n                Object.entries(data).forEach(\n                    ([key, value]) => formData.append(key, value)\n                )\n                 HTTP.post('posts/' + data.post_id + '/comments', formData, {\n                        headers: {\n                            'Authorization': 'Bearer ' + user.token,\n                            'Content-Type': \"multipart/form-data\",\n                        }\n                    })\n                    .then(response => {\n                        let result={\n                            comment:  response.data,\n                            post_id: data.post_id\n                        }\n                        console.log(result)\n                        commit('ADD_Comment_Post',result)\n                    })\n                    .catch(error => console.log(error))\n            }\n        }\n    },\n    getters: {\n        getPost: state => state.post,\n        getPosts: state => state.posts.sort((a, b) => b.id - a.id),\n        getStep: state => state.step,\n    },\n}"]},"metadata":{},"sourceType":"module"}