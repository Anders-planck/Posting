{"ast":null,"code":"import _slicedToArray from \"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { newPost, allPosts, registerPost } from '@/services/PostsServices.js';\nimport router from '../../router';\nimport { HTTP } from '../../services/axios';\nexport default {\n  state: {\n    post: newPost(),\n    posts: [],\n    step: 1\n  },\n  mutations: {\n    nextStep: function nextStep(state) {\n      return state.step++;\n    },\n    backStep: function backStep(state) {\n      return state.step--;\n    },\n    RESET_post: function RESET_post(state) {\n      return state.post = newPost();\n    },\n    setStep: function setStep(state, payload) {\n      return state.step = payload;\n    },\n    ADD_Post: function ADD_Post(state, payload) {\n      state.posts.push(payload);\n      router.push('/');\n    },\n    setCommentPost: function () {\n      var _setCommentPost = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(state, payload) {\n        var user, formData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                user = localStorage.getItem('accessInfo');\n\n                if (!(user != 'undefined' && user != null)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                user = JSON.parse(user);\n                formData = new FormData();\n                Object.entries(payload).forEach(function (_ref) {\n                  var _ref2 = _slicedToArray(_ref, 2),\n                      key = _ref2[0],\n                      value = _ref2[1];\n\n                  return formData.append(key, value);\n                });\n                _context.next = 7;\n                return HTTP.post('posts/' + payload.post_id + '/comments', formData, {\n                  headers: {\n                    'Authorization': 'Bearer ' + user.token,\n                    'Content-Type': \"multipart/form-data\"\n                  }\n                }).then(function (response) {\n                  allPosts();\n                }).catch(function (error) {\n                  return console.log(error);\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function setCommentPost(_x, _x2) {\n        return _setCommentPost.apply(this, arguments);\n      }\n\n      return setCommentPost;\n    }(),\n    SET_Posts: function SET_Posts(state, payload) {\n      state.posts = payload;\n      console.log(state.posts);\n    }\n  },\n  actions: {\n    resetPost: function resetPost(_ref3) {\n      var commit = _ref3.commit;\n      commit('RESET_post');\n    },\n    nextStep: function nextStep(_ref4) {\n      var commit = _ref4.commit;\n      commit('nextStep');\n    },\n    backStep: function backStep(_ref5) {\n      var commit = _ref5.commit;\n      commit('backStep');\n    },\n    setStep: function setStep(_ref6) {\n      var commit = _ref6.commit;\n      commit('setStep');\n    },\n    addPost: function addPost(_ref7) {\n      var commit = _ref7.commit;\n      var accessInfo = localStorage.getItem('accessInfo');\n\n      if (accessInfo != 'undefined' && accessInfo != null) {\n        accessInfo = JSON.parse(accessInfo);\n        var formData = new FormData();\n        Object.entries(data.Post).forEach(function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 2),\n              key = _ref9[0],\n              value = _ref9[1];\n\n          return formData.append(key, value);\n        });\n        HTTP.post('posts', formData, {\n          headers: {\n            'Authorization': 'Bearer ' + accessInfo.token,\n            'Content-Type': \"multipart/form-data\"\n          }\n        }).then(function (response) {\n          commit('ADD_Post', response.data);\n\n          if (data.tags.length > 0) {\n            data.tags.forEach(function (tag) {\n              formData = new FormData();\n              Object.entries(tag).forEach(function (_ref10) {\n                var _ref11 = _slicedToArray(_ref10, 2),\n                    key = _ref11[0],\n                    value = _ref11[1];\n\n                return formData.append(key, value);\n              });\n              HTTP.post('posts/' + response.data.id + '/tags', formData, {\n                headers: {\n                  'Authorization': 'Bearer ' + accessInfo.token,\n                  'Content-Type': \"multipart/form-data\"\n                }\n              }).then(function (response) {\n                commit('ADD_Tags_Post', response.data);\n              }).catch(function (error) {\n                console.log(error);\n              });\n            });\n          }\n\n          if (data.images.length > 0) {\n            data.images.forEach(function (image) {\n              formData = new FormData();\n              var req = {\n                image: image,\n                size: image.size,\n                name: image.name\n              };\n              Object.entries(req).forEach(function (_ref12) {\n                var _ref13 = _slicedToArray(_ref12, 2),\n                    key = _ref13[0],\n                    value = _ref13[1];\n\n                return formData.append(key, value);\n              });\n              HTTP.post('posts/' + response.data.id + '/images', formData, {\n                headers: {\n                  'Authorization': 'Bearer ' + accessInfo.token,\n                  'Content-Type': \"multipart/form-data\"\n                }\n              }).then(function (response) {\n                console.log(response.data);\n              }).catch(function (error) {\n                console.log(error);\n              });\n            });\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n        GetAllPosts();\n        return;\n      }\n    },\n    getPosts: function getPosts(_ref14) {\n      var commit = _ref14.commit;\n      var accessInfo = localStorage.getItem('accessInfo');\n\n      if (accessInfo != 'undefined' && accessInfo != null) {\n        accessInfo = JSON.parse(accessInfo);\n        HTTP.get('posts', {\n          headers: {\n            'Authorization': 'Bearer ' + accessInfo.token\n          }\n        }).then(function (response) {\n          commit('SET_Posts', response.data);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  },\n  getters: {\n    getPost: function getPost(state) {\n      return state.post;\n    },\n    getPosts: function getPosts(state) {\n      return state.posts.sort(function (a, b) {\n        return b.id - a.id;\n      });\n    },\n    getStep: function getStep(state) {\n      return state.step;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/anders/Desktop/work/Vue/Posting-app/src/store/modules/posts.js"],"names":["newPost","allPosts","registerPost","router","HTTP","state","post","posts","step","mutations","nextStep","backStep","RESET_post","setStep","payload","ADD_Post","push","setCommentPost","user","localStorage","getItem","JSON","parse","formData","FormData","Object","entries","forEach","key","value","append","post_id","headers","token","then","response","catch","error","console","log","SET_Posts","actions","resetPost","commit","addPost","accessInfo","data","Post","tags","length","tag","id","images","image","req","size","name","GetAllPosts","getPosts","get","getters","getPost","sort","a","b","getStep"],"mappings":";;;;;;;AAAA,SACIA,OADJ,EAEIC,QAFJ,EAGIC,YAHJ,QAIO,6BAJP;AAKA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SACIC,IADJ,QAEO,sBAFP;AAMA,eAAe;AACXC,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAEN,OAAO,EADV;AAEHO,IAAAA,KAAK,EAAE,EAFJ;AAGHC,IAAAA,IAAI,EAAE;AAHH,GADI;AAOXC,EAAAA,SAAS,EAAE;AACPC,IAAAA,QAAQ,EAAE,kBAAAL,KAAK;AAAA,aAAIA,KAAK,CAACG,IAAN,EAAJ;AAAA,KADR;AAEPG,IAAAA,QAAQ,EAAE,kBAAAN,KAAK;AAAA,aAAIA,KAAK,CAACG,IAAN,EAAJ;AAAA,KAFR;AAGPI,IAAAA,UAAU,EAAE,oBAAAP,KAAK;AAAA,aAAIA,KAAK,CAACC,IAAN,GAAaN,OAAO,EAAxB;AAAA,KAHV;AAIPa,IAAAA,OAAO,EAAE,iBAACR,KAAD,EAAQS,OAAR;AAAA,aAAoBT,KAAK,CAACG,IAAN,GAAaM,OAAjC;AAAA,KAJF;AAMPC,IAAAA,QAAQ,EAAE,kBAACV,KAAD,EAAQS,OAAR,EAAoB;AAC1BT,MAAAA,KAAK,CAACE,KAAN,CAAYS,IAAZ,CAAiBF,OAAjB;AACAX,MAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AAEH,KAVM;AAYPC,IAAAA,cAAc;AAAA,oFAAE,iBAAOZ,KAAP,EAAcS,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AACRI,gBAAAA,IADQ,GACDC,YAAY,CAACC,OAAb,CAAqB,YAArB,CADC;;AAAA,sBAGRF,IAAI,IAAI,WAAR,IAAuBA,IAAI,IAAI,IAHvB;AAAA;AAAA;AAAA;;AAIRA,gBAAAA,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAP;AACIK,gBAAAA,QALI,GAKO,IAAIC,QAAJ,EALP;AAMRC,gBAAAA,MAAM,CAACC,OAAP,CAAeZ,OAAf,EAAwBa,OAAxB,CACI;AAAA;AAAA,sBAAEC,GAAF;AAAA,sBAAOC,KAAP;;AAAA,yBAAkBN,QAAQ,CAACO,MAAT,CAAgBF,GAAhB,EAAqBC,KAArB,CAAlB;AAAA,iBADJ;AANQ;AAAA,uBASFzB,IAAI,CAACE,IAAL,CAAU,WAAWQ,OAAO,CAACiB,OAAnB,GAA6B,WAAvC,EAAoDR,QAApD,EAA8D;AAC5DS,kBAAAA,OAAO,EAAE;AACL,qCAAiB,YAAYd,IAAI,CAACe,KAD7B;AAEL,oCAAgB;AAFX;AADmD,iBAA9D,EAMDC,IANC,CAMI,UAAAC,QAAQ,EAAI;AACdlC,kBAAAA,QAAQ;AACX,iBARC,EASDmC,KATC,CASK,UAAAC,KAAK;AAAA,yBAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAJ;AAAA,iBATV,CATE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAZP;AAkCPG,IAAAA,SAAS,EAAE,mBAACnC,KAAD,EAAOS,OAAP,EAAkB;AACzBT,MAAAA,KAAK,CAACE,KAAN,GAAYO,OAAZ;AACAwB,MAAAA,OAAO,CAACC,GAAR,CAAYlC,KAAK,CAACE,KAAlB;AACH;AArCM,GAPA;AA8CXkC,EAAAA,OAAO,EAAE;AACLC,IAAAA,SADK,4BACc;AAAA,UAARC,MAAQ,SAARA,MAAQ;AAACA,MAAAA,MAAM,CAAC,YAAD,CAAN;AAAqB,KADpC;AAELjC,IAAAA,QAFK,2BAEa;AAAA,UAARiC,MAAQ,SAARA,MAAQ;AAACA,MAAAA,MAAM,CAAC,UAAD,CAAN;AAAmB,KAFjC;AAGLhC,IAAAA,QAHK,2BAGa;AAAA,UAARgC,MAAQ,SAARA,MAAQ;AAACA,MAAAA,MAAM,CAAC,UAAD,CAAN;AAAmB,KAHjC;AAIL9B,IAAAA,OAJK,0BAIY;AAAA,UAAR8B,MAAQ,SAARA,MAAQ;AAACA,MAAAA,MAAM,CAAC,SAAD,CAAN;AAAkB,KAJ/B;AAMLC,IAAAA,OANK,0BAMY;AAAA,UAARD,MAAQ,SAARA,MAAQ;AACb,UAAIE,UAAU,GAAG1B,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAjB;;AACV,UAAIyB,UAAU,IAAI,WAAd,IAA6BA,UAAU,IAAI,IAA/C,EAAqD;AACnDA,QAAAA,UAAU,GAAGxB,IAAI,CAACC,KAAL,CAAWuB,UAAX,CAAb;AACA,YAAItB,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAC,QAAAA,MAAM,CAACC,OAAP,CAAeoB,IAAI,CAACC,IAApB,EAA0BpB,OAA1B,CACE;AAAA;AAAA,cAAEC,GAAF;AAAA,cAAOC,KAAP;;AAAA,iBAAkBN,QAAQ,CAACO,MAAT,CAAgBF,GAAhB,EAAqBC,KAArB,CAAlB;AAAA,SADF;AAGAzB,QAAAA,IAAI,CAACE,IAAL,CAAU,OAAV,EAAmBiB,QAAnB,EAA6B;AACzBS,UAAAA,OAAO,EAAE;AACP,6BAAiB,YAAYa,UAAU,CAACZ,KADjC;AAEP,4BAAgB;AAFT;AADgB,SAA7B,EAMGC,IANH,CAMQ,UAAAC,QAAQ,EAAI;AAEhBQ,UAAAA,MAAM,CAAC,UAAD,EAAYR,QAAQ,CAACW,IAArB,CAAN;;AACA,cAAGA,IAAI,CAACE,IAAL,CAAUC,MAAV,GAAiB,CAApB,EAAsB;AACpBH,YAAAA,IAAI,CAACE,IAAL,CAAUrB,OAAV,CAAkB,UAAAuB,GAAG,EAAG;AACtB3B,cAAAA,QAAQ,GAAG,IAAIC,QAAJ,EAAX;AACAC,cAAAA,MAAM,CAACC,OAAP,CAAewB,GAAf,EAAoBvB,OAApB,CACE;AAAA;AAAA,oBAAEC,GAAF;AAAA,oBAAOC,KAAP;;AAAA,uBAAkBN,QAAQ,CAACO,MAAT,CAAgBF,GAAhB,EAAqBC,KAArB,CAAlB;AAAA,eADF;AAGAzB,cAAAA,IAAI,CAACE,IAAL,CAAU,WAAS6B,QAAQ,CAACW,IAAT,CAAcK,EAAvB,GAA0B,OAApC,EAA4C5B,QAA5C,EAAqD;AACnDS,gBAAAA,OAAO,EAAE;AACP,mCAAiB,YAAYa,UAAU,CAACZ,KADjC;AAEP,kCAAgB;AAFT;AAD0C,eAArD,EAMCC,IAND,CAMM,UAAAC,QAAQ,EAAI;AACdQ,gBAAAA,MAAM,CAAC,eAAD,EAAiBR,QAAQ,CAACW,IAA1B,CAAN;AACH,eARD,EASCV,KATD,CASO,UAAAC,KAAK,EAAI;AACdC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,eAXD;AAYD,aAjBD;AAkBD;;AAED,cAAGS,IAAI,CAACM,MAAL,CAAYH,MAAZ,GAAmB,CAAtB,EAAwB;AACtBH,YAAAA,IAAI,CAACM,MAAL,CAAYzB,OAAZ,CAAoB,UAAA0B,KAAK,EAAG;AAC1B9B,cAAAA,QAAQ,GAAG,IAAIC,QAAJ,EAAX;AACA,kBAAM8B,GAAG,GAAC;AACRD,gBAAAA,KAAK,EAAEA,KADC;AAERE,gBAAAA,IAAI,EAAEF,KAAK,CAACE,IAFJ;AAGRC,gBAAAA,IAAI,EAAEH,KAAK,CAACG;AAHJ,eAAV;AAKA/B,cAAAA,MAAM,CAACC,OAAP,CAAe4B,GAAf,EAAoB3B,OAApB,CACE;AAAA;AAAA,oBAAEC,GAAF;AAAA,oBAAOC,KAAP;;AAAA,uBAAkBN,QAAQ,CAACO,MAAT,CAAgBF,GAAhB,EAAqBC,KAArB,CAAlB;AAAA,eADF;AAGAzB,cAAAA,IAAI,CAACE,IAAL,CAAU,WAAS6B,QAAQ,CAACW,IAAT,CAAcK,EAAvB,GAA0B,SAApC,EAA8C5B,QAA9C,EAAuD;AACrDS,gBAAAA,OAAO,EAAE;AACP,mCAAiB,YAAYa,UAAU,CAACZ,KADjC;AAEP,kCAAgB;AAFT;AAD4C,eAAvD,EAMCC,IAND,CAMM,UAAAC,QAAQ,EAAI;AAChBG,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACW,IAArB;AACD,eARD,EASCV,KATD,CASO,UAAAC,KAAK,EAAI;AACdC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,eAXD;AAYD,aAtBD;AAuBD;AACF,SAvDH,EAwDGD,KAxDH,CAwDS,UAAAC,KAAK,EAAI;AACdC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,SA1DH;AA4DAoB,QAAAA,WAAW;AACX;AACD;AACM,KA7EI;AA8ELC,IAAAA,QA9EK,4BA8Ec;AAAA,UAATf,MAAS,UAATA,MAAS;AACf,UAAIE,UAAU,GAAG1B,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAjB;;AAEA,UAAIyB,UAAU,IAAI,WAAd,IAA6BA,UAAU,IAAI,IAA/C,EAAqD;AACjDA,QAAAA,UAAU,GAAGxB,IAAI,CAACC,KAAL,CAAWuB,UAAX,CAAb;AACAzC,QAAAA,IAAI,CAACuD,GAAL,CAAS,OAAT,EAAkB;AACV3B,UAAAA,OAAO,EAAE;AACL,6BAAiB,YAAYa,UAAU,CAACZ;AADnC;AADC,SAAlB,EAKKC,IALL,CAKU,UAAAC,QAAQ,EAAI;AACdQ,UAAAA,MAAM,CAAC,WAAD,EAAcR,QAAQ,CAACW,IAAvB,CAAN;AACH,SAPL,EAQKV,KARL,CAQW,UAAAC,KAAK,EAAI;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,SAVL;AAWH;AACJ;AA/FI,GA9CE;AAkJXuB,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE,iBAAAxD,KAAK;AAAA,aAAIA,KAAK,CAACC,IAAV;AAAA,KADT;AAELoD,IAAAA,QAAQ,EAAE,kBAAArD,KAAK;AAAA,aAAIA,KAAK,CAACE,KAAN,CAAYuD,IAAZ,CAAiB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUA,CAAC,CAACb,EAAF,GAAOY,CAAC,CAACZ,EAAnB;AAAA,OAAjB,CAAJ;AAAA,KAFV;AAGLc,IAAAA,OAAO,EAAE,iBAAA5D,KAAK;AAAA,aAAIA,KAAK,CAACG,IAAV;AAAA;AAHT;AAlJE,CAAf","sourcesContent":["import {\n    newPost,\n    allPosts,\n    registerPost,\n} from '@/services/PostsServices.js'\nimport router from '../../router'\nimport {\n    HTTP\n} from '../../services/axios'\n\n\n\nexport default {\n    state: {\n        post: newPost(),\n        posts: [],\n        step: 1,\n    },\n\n    mutations: {\n        nextStep: state => state.step++,\n        backStep: state => state.step--,\n        RESET_post: state => state.post = newPost(),\n        setStep: (state, payload) => state.step = payload,\n\n        ADD_Post: (state, payload) => {\n            state.posts.push(payload)\n            router.push('/')\n\n        },\n\n        setCommentPost: async (state, payload) => {\n            let user = localStorage.getItem('accessInfo')\n\n            if (user != 'undefined' && user != null) {\n                user = JSON.parse(user)\n                let formData = new FormData()\n                Object.entries(payload).forEach(\n                    ([key, value]) => formData.append(key, value)\n                )\n                await HTTP.post('posts/' + payload.post_id + '/comments', formData, {\n                        headers: {\n                            'Authorization': 'Bearer ' + user.token,\n                            'Content-Type': \"multipart/form-data\",\n                        }\n                    })\n                    .then(response => {\n                        allPosts()\n                    })\n                    .catch(error => console.log(error))\n            }\n        },\n\n        SET_Posts: (state,payload) =>{\n            state.posts=payload\n            console.log(state.posts)\n        },\n    },\n    actions: {\n        resetPost({commit}){commit('RESET_post')},\n        nextStep({commit}){commit('nextStep')},\n        backStep({commit}){commit('backStep')},\n        setStep({commit}){commit('setStep')},\n\n        addPost({commit}){\n            let accessInfo = localStorage.getItem('accessInfo')\n  if (accessInfo != 'undefined' && accessInfo != null) {\n    accessInfo = JSON.parse(accessInfo)\n    let formData = new FormData()\n    Object.entries(data.Post).forEach(\n      ([key, value]) => formData.append(key, value)\n    )\n    HTTP.post('posts', formData, {\n        headers: {\n          'Authorization': 'Bearer ' + accessInfo.token,\n          'Content-Type': \"multipart/form-data\",\n        }\n      })\n      .then(response => {\n\n        commit('ADD_Post',response.data)\n        if(data.tags.length>0){\n          data.tags.forEach(tag =>{\n            formData = new FormData()\n            Object.entries(tag).forEach(\n              ([key, value]) => formData.append(key, value)\n            )\n            HTTP.post('posts/'+response.data.id+'/tags',formData,{\n              headers: {\n                'Authorization': 'Bearer ' + accessInfo.token,\n                'Content-Type': \"multipart/form-data\",\n              }\n            })\n            .then(response => {\n                commit('ADD_Tags_Post',response.data)\n            })\n            .catch(error => {\n              console.log(error)\n            })\n          })\n        }\n\n        if(data.images.length>0){\n          data.images.forEach(image =>{\n            formData = new FormData()\n            const req={\n              image: image,\n              size: image.size,\n              name: image.name\n            }\n            Object.entries(req).forEach(\n              ([key, value]) => formData.append(key, value)\n            )\n            HTTP.post('posts/'+response.data.id+'/images',formData,{\n              headers: {\n                'Authorization': 'Bearer ' + accessInfo.token,\n                'Content-Type': \"multipart/form-data\",\n              }\n            })\n            .then(response => {\n              console.log(response.data)\n            })\n            .catch(error => {\n              console.log(error)\n            })\n          })\n        }\n      })\n      .catch(error => {\n        console.log(error)\n      })\n\n    GetAllPosts()\n    return\n  }\n        },\n        getPosts({commit}) {\n            let accessInfo = localStorage.getItem('accessInfo')\n\n            if (accessInfo != 'undefined' && accessInfo != null) {\n                accessInfo = JSON.parse(accessInfo)\n                HTTP.get('posts', {\n                        headers: {\n                            'Authorization': 'Bearer ' + accessInfo.token,\n                        }\n                    })\n                    .then(response => {\n                        commit('SET_Posts', response.data)\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n            }\n        },\n        \n\n\n    },\n    getters: {\n        getPost: state => state.post,\n        getPosts: state => state.posts.sort((a, b) => b.id - a.id),\n        getStep: state => state.step,\n    },\n}"]},"metadata":{},"sourceType":"module"}