{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.map.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Editor from \"@/components/Editor\";\nimport AddIcon from '@/components/Icons/AddIcon';\nimport CloseIcon from '@/components/Icons/CloseIcon';\nimport vue2Dropzone from 'vue2-dropzone';\nimport 'vue2-dropzone/dist/vue2Dropzone.min.css';\nimport { HTTP } from '@/services/axios.js';\nexport default {\n  name: 'Form',\n  props: {\n    state: {\n      type: String,\n      require: true\n    },\n    post: {\n      type: Object,\n      require: true\n    } // messages:{\n    //     type:Object,\n    //     require:false,\n    // }\n\n  },\n  components: {\n    Editor: Editor,\n    AddIcon: AddIcon,\n    CloseIcon: CloseIcon,\n    vueDropzone: vue2Dropzone\n  },\n  created: function created() {//this.post = newPost()\n  },\n  computed: {\n    validation: function validation() {\n      if (this.post.title.length == 0) {\n        this.Messages.title = 'please fill in the title field';\n        return false;\n      } else this.Messages.title = '';\n\n      if (this.post.title.length > 0 && this.post.title.length <= this.minTitleSize) {\n        this.Messages.title = 'please enter at least ' + this.minTitleSize + ' characters on title field';\n        return false;\n      } else this.Messages.title = '';\n\n      if (this.post.description.length == 0) {\n        this.Messages.description = 'please fill in the Description field';\n        return false;\n      } else this.Messages.description = '';\n\n      if (this.post.description.length > 0 && this.post.description.length <= this.minDescriptionSize) {\n        this.Messages.description = 'please enter at least ' + this.minDescriptionSize + 'characters on descripton field';\n        return false;\n      } else this.Messages.description = '';\n\n      return true;\n    }\n  },\n  data: function data() {\n    return {\n      // //post: null,\n      // attachments: [],\n      // dropzoneOptions: {\n      //     url: 'https://localhost:3000/api/v1/images',\n      //     maxFilesize: 102400000,\n      //     // Authentication Headers like Access_Token of your application\n      //     headers: {\n      //         Authorization: `Access Token`\n      //     },\n      //     dictDefaultMessage: \"Upload Files Here xD\",\n      //     includeStyling: false,\n      //     thumbnailWidth: 250,\n      //     thumbnailHeight: 140,\n      //     uploadMultiple: true,\n      //     parallelUploads: 20\n      // },\n      minTitleSize: 10,\n      minDescriptionSize: 100,\n      Messages: {\n        title: '',\n        description: ''\n      }\n    };\n  },\n  methods: {\n    /* inizialize(){\n        if(this.$props.state=='create' && this.$props.post==null){\n            this.post=this.getEmptyPost()\n        }\n    },\n    getEmptyPost(){\n        let post= {\n            online:true,\n            at: '',\n            title: '',\n            description: '',\n            images: [],\n            tags:[],\n        }\n        return post             \n    }, */\n    AddTag: function AddTag() {\n      var tag = {\n        body: ''\n      };\n      this.post.tags.push(tag);\n    },\n    RemoveTag: function RemoveTag(index) {\n      this.post.tags.splice(index, 1);\n    },\n    // AddImage(){\n    //     this.post.images.push('');\n    // },\n    // RemoveImage(index){\n    //     this.post.images.splice(index,1);\n    // },\n    // onFileSelected(event){\n    //     this.post.images[this.post.images.length-1]=event.target.files[0]\n    //     console.log(this.post.images)\n    // },\n    // async sendingFiles(files, xhr, formData) {\n    //     console.log('sending file manully')\n    //     let data={\n    //         name: 'PostCreate',\n    //         size: this.post.length,\n    //         images:this.images\n    //     }\n    //     await HTTP.post('images',data)\n    //     .then(response => {\n    //         console.log(response.data)\n    //     })\n    //     .catch(error => {\n    //         console.log(error)\n    //     })\n    // },\n    fileAdd: function fileAdd(event) {\n      this.post.images = event.target.files.map(function (file) {\n        return file;\n      });\n    }\n  }\n};","map":{"version":3,"sources":["Form.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"form\">\n        <div class=\"nb mb-3 p-2 bg-green-200 text-md\">\n            NB: All fields with the asterisk <span class=\"text-red-500 my-2 text-xl\">*</span> are required\n        </div>\n        <div class=\"mb-3 form-group\">\n            <label  v-if=\"post.title.length==0\" for=\"title\" class=\"label\">\n                Title\n                <span class=\"require\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              placeholder=\"Your title here... \"\n              name=\"title\"\n              v-model=\"post.title\"\n              class=\"input\" />\n\n            <ul v-if=\"!validation && Messages.title.length!=0\" class=\"errorInput\">\n                <li>{{Messages.title}}</li>\n            </ul>\n        </div>\n\n        <div class=\"mb-6 form-group\">\n            <div class=\"fields\">\n                <label for=\"title\" class=\"label\">\n                    Tags\n                </label>\n                <div class=\"add\"  @click=\"AddTag\">\n                    <AddIcon size=\"20px\"/>\n                </div>\n            </div>\n            <transition-group name=\"listTag\" enter-active-class=\"animate__animated animate__backInLeft animate__faster\">\n            <div v-for=\"(tag,index) in post.tags\" :key=\"index\" class=\"fields mt-3 form-group\">\n                <label :for=\"tag\" class=\"label add text-gray-400\">\n                    <span class=\"text-gray-500\">#</span>{{index+1}}\n                </label>\n                <input type=\"text\"  placeholder=\" Your tag...\" v-model=\"post.tags[index].body\" class=\"input inputItem \" />\n                <div class=\"add\"  @click=\"RemoveTag(index)\">\n                    <CloseIcon size=\"15px\"/>\n                </div>\n            </div>\n            </transition-group>\n        </div>\n\n        \n        <div class=\"mb-6 form-group\">\n            <label v-if=\"post.description.length==0\" for=\"Description\" class=\"label\">\n                description\n                <span class=\"require\">*</span>\n            </label>\n            \n            <Editor inputName=\"description\" :post=\"post\" class=\"mt-2\"/>\n            <ul v-if=\" !validation && Messages.description.length!=0\" class=\"errorInput\">\n                <li>{{Messages.description}}</li>\n            </ul>\n        </div>\n\n                    \n\n        <div class=\"mb-6 form-group\">\n            <div class=\"fields\">\n                <label for=\"title\" class=\"label\">\n                    Images\n                </label>\n                <!-- <div class=\"add\"  @click=\"AddImage\">\n                    <AddIcon size=\"25px\"/>\n                </div> -->\n            </div>\n\n            <div class=\"fields mt-3 form-group\">\n                <input type=\"file\" multiple   class=\"input inputItem\" @change=\"fileAdd\" />\n            </div>\n            <!-- <vue-dropzone\n              :options=\"dropzoneOptions\"\n              @vdropzone-sending=\"sendingFiles\"\n              ref=\"myVueDropzone\"\n              id=\"dropzone\"\n              @vdropzone-file-added=\"fileAdd\">\n            </vue-dropzone> -->\n        </div>\n\n        <div class=\"mb-3 form-group checkbox\">\n            <label for=\"online\" class=\"label check\">\n                Online\n                <span class=\"require\">*</span>\n            </label>\n            <input type=\"checkbox\" id=\"online\" name=\"online\"  v-model=\"post.online\" class=\"check\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport Editor from \"@/components/Editor\"\nimport AddIcon from '@/components/Icons/AddIcon'\nimport CloseIcon from '@/components/Icons/CloseIcon'\nimport vue2Dropzone from 'vue2-dropzone'\nimport 'vue2-dropzone/dist/vue2Dropzone.min.css'\nimport {HTTP} from '@/services/axios.js'\n\nexport default {\n    name: 'Form',\n    props: {\n        state: {\n            type: String,\n            require: true\n        },\n        post: {\n            type: Object,\n            require: true\n        },\n        // messages:{\n        //     type:Object,\n        //     require:false,\n        // }\n    },\n    components: {\n        Editor,\n        AddIcon,\n        CloseIcon,\n        vueDropzone: vue2Dropzone\n    },\n    created() {\n        //this.post = newPost()\n    },\n    computed:{\n        validation(){\n            if(this.post.title.length == 0){\n                this.Messages.title= 'please fill in the title field'\n                return false\n            }else \n                this.Messages.title= ''\n            if(this.post.title.length>0 && this.post.title.length <= this.minTitleSize){\n                this.Messages.title ='please enter at least '+ this.minTitleSize+' characters on title field'\n                return false\n            }else \n                this.Messages.title= ''\n            if(this.post.description.length==0 ){\n                this.Messages.description= 'please fill in the Description field'\n                return false\n            }else \n                this.Messages.description= ''\n            if(this.post.description.length >0 && this.post.description.length <= this.minDescriptionSize){\n                this.Messages.description ='please enter at least '+ this.minDescriptionSize +'characters on descripton field'\n                return false\n            }else \n                this.Messages.description= ''\n            return true \n        },\n    },\n    data() {\n        return {\n            // //post: null,\n            // attachments: [],\n            // dropzoneOptions: {\n            //     url: 'https://localhost:3000/api/v1/images',\n            //     maxFilesize: 102400000,\n            //     // Authentication Headers like Access_Token of your application\n            //     headers: {\n            //         Authorization: `Access Token`\n            //     },\n            //     dictDefaultMessage: \"Upload Files Here xD\",\n            //     includeStyling: false,\n            //     thumbnailWidth: 250,\n            //     thumbnailHeight: 140,\n            //     uploadMultiple: true,\n            //     parallelUploads: 20\n            // },\n            minTitleSize:10,\n            minDescriptionSize:100,\n            Messages:{\n                title:'',\n                description: '',\n            }\n        }\n    },\n    methods: {\n        /* inizialize(){\n            if(this.$props.state=='create' && this.$props.post==null){\n                this.post=this.getEmptyPost()\n            }\n        },\n        getEmptyPost(){\n            let post= {\n                online:true,\n                at: '',\n                title: '',\n                description: '',\n                images: [],\n                tags:[],\n            }\n            return post             \n        }, */\n        AddTag() {\n            let tag={body:''}\n            this.post.tags.push(tag);\n        },\n        RemoveTag(index) {\n            this.post.tags.splice(index, 1);\n        },\n\n        \n\n        // AddImage(){\n        //     this.post.images.push('');\n        // },\n        // RemoveImage(index){\n        //     this.post.images.splice(index,1);\n        // },\n        // onFileSelected(event){\n        //     this.post.images[this.post.images.length-1]=event.target.files[0]\n        //     console.log(this.post.images)\n        // },\n\n        // async sendingFiles(files, xhr, formData) {\n        //     console.log('sending file manully')\n        //     let data={\n        //         name: 'PostCreate',\n        //         size: this.post.length,\n        //         images:this.images\n        //     }\n        //     await HTTP.post('images',data)\n        //     .then(response => {\n        //         console.log(response.data)\n        //     })\n        //     .catch(error => {\n        //         console.log(error)\n        //     })\n        // },\n\n        fileAdd(event) {\n            this.post.images=event.target.files.map((file) =>{return file});\n        },\n    }\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.error {\n    border: 1px solid #c0392b !important;\n}\n.nb{\n    border-radius: 5px;\n    font-weight: 600;\n    font-family: 'Nunito', sans-serif;\n}\n.form-group{\n    .input {\n        display: block;\n        outline: none;\n        border: 1px solid #d1d8e0;\n        border-radius: 5px;\n        padding: 5px 7px;\n        width: 100%;\n        min-width: auto;\n        font-family: 'Nunito', sans-serif;\n        font-weight: 600;\n        background: #f1f2f6;\n\n\n        &::placeholder {\n            //color: #000 !important;\n            //font-weight: bold;\n            font-family: 'Nunito', sans-serif;\n            text-transform: capitalize;\n        }\n\n\n    }\n\n    &:first-child {\n        margin-top: 0 !important;\n    }\n    ul {\n    border: 1px solid #c0392b;\n    border-left: 5px solid #c0392b !important;\n    border-radius: 5px;\n    background: #c03a2b1c;\n    margin-top: 10px;\n    font-style: italic;\n    padding: 3px;\n    width: 100%;\n    text-align: left;\n    color: #ff4757 !important;\n    font-size: 10px;\n    font-weight: bolder;\n\n    li {\n        list-style: none;\n    }\n\n    li>span {\n        font-weight: bolder;\n        font-size: 11px;\n    }\n}\n}\n\n.label {\n    font-family: 'Varela Round', sans-serif;\n    font-weight: 900;\n    margin-bottom: 2px;\n    font-size: 1rem;\n    position: relative;\n    text-transform: capitalize;\n    display: inline-block;\n}\n\n.input {\n    border: 2px solid rgba(0, 0, 0, 0.089);\n    border-radius: 5px !important;\n    padding: 0.5rem;\n    font-family: 'Varela Round', sans-serif;\n    font-size: 1rem;\n    width: 100%;\n    display: block;\n}\n\n.inputItem {\n    width: 80% !important;\n}\n\n.require {\n    font-size: 1.3rem;\n    color: #eb2f06;\n    position: absolute;\n    top: -5px;\n    right: -10px;\n}\n\n.textarea {\n    font-family: 'Varela Round', sans-serif;\n}\n\n\n.fields {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n}\n\n.add,\n.close {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 60px;\n    height: 50px;\n    background: rgba(0, 0, 0, 0.048);\n    border-radius: 5px;\n    transition: all 0.3s ease-in-out;\n    cursor: pointer;\n\n    &:hover {\n        transform: scale(1.05);\n    }\n\n    span {\n        display: block;\n    }\n}\n\n.check {\n    margin-right: 20px;\n}\n\n\n</style>"],"sourceRoot":"src/components/Posts/PostCreate"},"metadata":{},"sourceType":"module"}