{"ast":null,"code":"import _slicedToArray from \"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { newPost, allPosts, registerPost } from '@/services/PostsServices.js';\nimport router from '../../router';\nimport { HTTP } from '../../services/axios';\nexport default {\n  state: {\n    post: newPost(),\n    posts: [],\n    step: 1\n  },\n  mutations: {\n    nextStep: function nextStep(state) {\n      return state.step++;\n    },\n    backStep: function backStep(state) {\n      return state.step--;\n    },\n    setStep: function setStep(state, payload) {\n      return state.step = payload;\n    },\n    addPost: function addPost(state, payload) {\n      //state.posts.push(payload)\n      registerPost(payload);\n      state.posts = allPosts;\n      router.push('/');\n    },\n    setCommentPost: function () {\n      var _setCommentPost = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(state, payload) {\n        var user, formData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                user = localStorage.getItem('accessInfo');\n\n                if (!(user != 'undefined' && user != null)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                user = JSON.parse(user);\n                formData = new FormData();\n                Object.entries(payload).forEach(function (_ref) {\n                  var _ref2 = _slicedToArray(_ref, 2),\n                      key = _ref2[0],\n                      value = _ref2[1];\n\n                  return formData.append(key, value);\n                });\n                _context.next = 7;\n                return HTTP.post('posts/' + payload.post_id + '/comments', formData, {\n                  headers: {\n                    'Authorization': 'Bearer ' + user.token,\n                    'Content-Type': \"multipart/form-data\"\n                  }\n                }).then(function (response) {\n                  allPosts();\n                }).catch(function (error) {\n                  return console.log(error);\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function setCommentPost(_x, _x2) {\n        return _setCommentPost.apply(this, arguments);\n      }\n\n      return setCommentPost;\n    }(),\n    resetPost: function resetPost(state) {\n      return state.post = newPost();\n    },\n    SET_Posts: function SET_Posts(state, payload) {\n      state.posts = payload;\n      console.log(state.posts);\n    }\n  },\n  actions: {\n    getPosts: function getPosts(_ref3) {\n      var commit = _ref3.commit;\n      var accessInfo = localStorage.getItem('accessInfo');\n\n      if (accessInfo != 'undefined' && accessInfo != null) {\n        accessInfo = JSON.parse(accessInfo);\n        HTTP.get('posts', {\n          headers: {\n            'Authorization': 'Bearer ' + accessInfo.token\n          }\n        }).then(function (response) {\n          commit('SET_Posts', response.data);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    },\n    resetPost: function resetPost(_ref4) {\n      var commit = _ref4.commit;\n    }\n  },\n  getters: {\n    getPost: function getPost(state) {\n      return state.post;\n    },\n    getPosts: function getPosts(state) {\n      return state.posts.sort(function (a, b) {\n        return b.id - a.id;\n      });\n    },\n    getStep: function getStep(state) {\n      return state.step;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/anders/Desktop/work/Vue/Posting-app/src/store/modules/posts.js"],"names":["newPost","allPosts","registerPost","router","HTTP","state","post","posts","step","mutations","nextStep","backStep","setStep","payload","addPost","push","setCommentPost","user","localStorage","getItem","JSON","parse","formData","FormData","Object","entries","forEach","key","value","append","post_id","headers","token","then","response","catch","error","console","log","resetPost","SET_Posts","actions","getPosts","commit","accessInfo","get","data","getters","getPost","sort","a","b","id","getStep"],"mappings":"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","sourcesContent":["import {\n    newPost,\n    allPosts,\n    registerPost,\n} from '@/services/PostsServices.js'\nimport router from '../../router'\nimport {\n    HTTP\n} from '../../services/axios'\n\n\n\nexport default {\n    state: {\n        post: newPost(),\n        posts: [],\n        step: 1,\n    },\n\n    mutations: {\n        nextStep: state => state.step++,\n        backStep: state => state.step--,\n        setStep: (state, payload) => (state.step = payload),\n        addPost: (state, payload) => {\n            //state.posts.push(payload)\n            registerPost(payload)\n\n            state.posts = allPosts\n            router.push('/')\n\n        },\n        setCommentPost: async (state, payload) => {\n            let user = localStorage.getItem('accessInfo')\n\n            if (user != 'undefined' && user != null) {\n                user = JSON.parse(user)\n                let formData = new FormData()\n                Object.entries(payload).forEach(\n                    ([key, value]) => formData.append(key, value)\n                )\n                await HTTP.post('posts/' + payload.post_id + '/comments', formData, {\n                        headers: {\n                            'Authorization': 'Bearer ' + user.token,\n                            'Content-Type': \"multipart/form-data\",\n                        }\n                    })\n                    .then(response => {\n                        allPosts()\n                    })\n                    .catch(error => console.log(error))\n            }\n        },\n        resetPost: state => state.post = newPost(),\n        SET_Posts: (state,payload) =>{\n            state.posts=payload\n            console.log(state.posts)\n        },\n    },\n    actions: {\n        getPosts({commit}) {\n            let accessInfo = localStorage.getItem('accessInfo')\n\n            if (accessInfo != 'undefined' && accessInfo != null) {\n                accessInfo = JSON.parse(accessInfo)\n                HTTP.get('posts', {\n                        headers: {\n                            'Authorization': 'Bearer ' + accessInfo.token,\n                        }\n                    })\n                    .then(response => {\n                        commit('SET_Posts', response.data)\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n            }\n        },\n        resetPost({commit}){\n            \n        }\n\n    },\n    getters: {\n        getPost: state => state.post,\n        getPosts: state => state.posts.sort((a, b) => b.id - a.id),\n        getStep: state => state.step,\n    },\n}"]},"metadata":{},"sourceType":"module"}