{"ast":null,"code":"import _slicedToArray from \"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { newPost, allPosts, registerPost } from '@/services/PostsServices.js';\nimport router from '../../router';\nimport { HTTP } from '../../services/axios';\nexport default {\n  state: {\n    post: newPost(),\n    posts: [],\n    step: 1\n  },\n  mutations: {\n    nextStep: function nextStep(state) {\n      return state.step++;\n    },\n    backStep: function backStep(state) {\n      return state.step--;\n    },\n    RESET_post: function RESET_post(state) {\n      return state.post = newPost();\n    },\n    setStep: function setStep(state, payload) {\n      return state.step = payload;\n    },\n    ADD_Post: function ADD_Post(state, payload) {\n      state.posts.push(payload);\n      router.push('/');\n    },\n    ADD_Tags_Post: function ADD_Tags_Post(state, payload) {},\n    ADD_Images_Post: function ADD_Images_Post(state, payload) {},\n    ADD_Comment_Post: function ADD_Comment_Post(state, payload) {},\n    SET_Posts: function SET_Posts(state, payload) {\n      state.posts = payload;\n      console.log(state.posts);\n    }\n  },\n  actions: {\n    resetPost: function resetPost(_ref) {\n      var commit = _ref.commit;\n      commit('RESET_post');\n    },\n    nextStep: function nextStep(_ref2) {\n      var commit = _ref2.commit;\n      commit('nextStep');\n    },\n    backStep: function backStep(_ref3) {\n      var commit = _ref3.commit;\n      commit('backStep');\n    },\n    setStep: function setStep(_ref4) {\n      var commit = _ref4.commit;\n      commit('setStep');\n    },\n    addPost: function addPost(_ref5) {\n      var commit = _ref5.commit;\n      var accessInfo = localStorage.getItem('accessInfo');\n\n      if (accessInfo != 'undefined' && accessInfo != null) {\n        accessInfo = JSON.parse(accessInfo);\n        var formData = new FormData();\n        Object.entries(data.Post).forEach(function (_ref6) {\n          var _ref7 = _slicedToArray(_ref6, 2),\n              key = _ref7[0],\n              value = _ref7[1];\n\n          return formData.append(key, value);\n        });\n        HTTP.post('posts', formData, {\n          headers: {\n            'Authorization': 'Bearer ' + accessInfo.token,\n            'Content-Type': \"multipart/form-data\"\n          }\n        }).then(function (response) {\n          commit('ADD_Post', response.data);\n\n          if (data.tags.length > 0) {\n            data.tags.forEach(function (tag) {\n              formData = new FormData();\n              Object.entries(tag).forEach(function (_ref8) {\n                var _ref9 = _slicedToArray(_ref8, 2),\n                    key = _ref9[0],\n                    value = _ref9[1];\n\n                return formData.append(key, value);\n              });\n              HTTP.post('posts/' + response.data.id + '/tags', formData, {\n                headers: {\n                  'Authorization': 'Bearer ' + accessInfo.token,\n                  'Content-Type': \"multipart/form-data\"\n                }\n              }).then(function (response) {\n                commit('ADD_Tags_Post', response.data);\n              }).catch(function (error) {\n                console.log(error);\n              });\n            });\n          }\n\n          if (data.images.length > 0) {\n            data.images.forEach(function (image) {\n              formData = new FormData();\n              var req = {\n                image: image,\n                size: image.size,\n                name: image.name\n              };\n              Object.entries(req).forEach(function (_ref10) {\n                var _ref11 = _slicedToArray(_ref10, 2),\n                    key = _ref11[0],\n                    value = _ref11[1];\n\n                return formData.append(key, value);\n              });\n              HTTP.post('posts/' + response.data.id + '/images', formData, {\n                headers: {\n                  'Authorization': 'Bearer ' + accessInfo.token,\n                  'Content-Type': \"multipart/form-data\"\n                }\n              }).then(function (response) {\n                commit('ADD_Images_Post', response.data);\n              }).catch(function (error) {\n                console.log(error);\n              });\n            });\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n        GetAllPosts();\n        return;\n      }\n    },\n    getPosts: function getPosts(_ref12) {\n      var commit = _ref12.commit;\n      var accessInfo = localStorage.getItem('accessInfo');\n\n      if (accessInfo != 'undefined' && accessInfo != null) {\n        accessInfo = JSON.parse(accessInfo);\n        HTTP.get('posts', {\n          headers: {\n            'Authorization': 'Bearer ' + accessInfo.token\n          }\n        }).then(function (response) {\n          commit('SET_Posts', response.data);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  },\n  getters: {\n    getPost: function getPost(state) {\n      return state.post;\n    },\n    getPosts: function getPosts(state) {\n      return state.posts.sort(function (a, b) {\n        return b.id - a.id;\n      });\n    },\n    getStep: function getStep(state) {\n      return state.step;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/anders/Desktop/work/Vue/Posting-app/src/store/modules/posts.js"],"names":["newPost","allPosts","registerPost","router","HTTP","state","post","posts","step","mutations","nextStep","backStep","RESET_post","setStep","payload","ADD_Post","push","ADD_Tags_Post","ADD_Images_Post","ADD_Comment_Post","SET_Posts","console","log","actions","resetPost","commit","addPost","accessInfo","localStorage","getItem","JSON","parse","formData","FormData","Object","entries","data","Post","forEach","key","value","append","headers","token","then","response","tags","length","tag","id","catch","error","images","image","req","size","name","GetAllPosts","getPosts","get","getters","getPost","sort","a","b","getStep"],"mappings":"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","sourcesContent":["import {\n    newPost,\n    allPosts,\n    registerPost,\n} from '@/services/PostsServices.js'\nimport router from '../../router'\nimport {\n    HTTP\n} from '../../services/axios'\n\n\n\nexport default {\n    state: {\n        post: newPost(),\n        posts: [],\n        step: 1,\n    },\n\n    mutations: {\n        nextStep: state => state.step++,\n        backStep: state => state.step--,\n        RESET_post: state => state.post = newPost(),\n        setStep: (state, payload) => state.step = payload,\n\n        ADD_Post: (state, payload) => {\n            state.posts.push(payload)\n            router.push('/')\n\n        },\n        ADD_Tags_Post: (state, payload) => {\n\n        },\n\n        ADD_Images_Post: (state, payload) => {\n\n        },\n\n        ADD_Comment_Post:  (state, payload) => {\n            \n        },\n\n        SET_Posts: (state, payload) => {\n            state.posts = payload\n            console.log(state.posts)\n        },\n    },\n    actions: {\n        resetPost({commit}) {\n            commit('RESET_post')\n        },\n        nextStep({commit}) {\n            commit('nextStep')\n        },\n        backStep({commit}) {\n            commit('backStep')\n        },\n        setStep({commit}) {\n            commit('setStep')\n        },\n\n        addPost({commit}) {\n            let accessInfo = localStorage.getItem('accessInfo')\n            if (accessInfo != 'undefined' && accessInfo != null) {\n                accessInfo = JSON.parse(accessInfo)\n                let formData = new FormData()\n                Object.entries(data.Post).forEach(\n                    ([key, value]) => formData.append(key, value)\n                )\n                HTTP.post('posts', formData, {\n                        headers: {\n                            'Authorization': 'Bearer ' + accessInfo.token,\n                            'Content-Type': \"multipart/form-data\",\n                        }\n                    })\n                    .then(response => {\n\n                        commit('ADD_Post', response.data)\n                        if (data.tags.length > 0) {\n                            data.tags.forEach(tag => {\n                                formData = new FormData()\n                                Object.entries(tag).forEach(\n                                    ([key, value]) => formData.append(key, value)\n                                )\n                                HTTP.post('posts/' + response.data.id + '/tags', formData, {\n                                        headers: {\n                                            'Authorization': 'Bearer ' + accessInfo.token,\n                                            'Content-Type': \"multipart/form-data\",\n                                        }\n                                    })\n                                    .then(response => {\n                                        commit('ADD_Tags_Post', response.data)\n                                    })\n                                    .catch(error => {\n                                        console.log(error)\n                                    })\n                            })\n                        }\n\n                        if (data.images.length > 0) {\n                            data.images.forEach(image => {\n                                formData = new FormData()\n                                const req = {\n                                    image: image,\n                                    size: image.size,\n                                    name: image.name\n                                }\n                                Object.entries(req).forEach(\n                                    ([key, value]) => formData.append(key, value)\n                                )\n                                HTTP.post('posts/' + response.data.id + '/images', formData, {\n                                        headers: {\n                                            'Authorization': 'Bearer ' + accessInfo.token,\n                                            'Content-Type': \"multipart/form-data\",\n                                        }\n                                    })\n                                    .then(response => {\n                                        commit('ADD_Images_Post', response.data)\n                                    })\n                                    .catch(error => {\n                                        console.log(error)\n                                    })\n                            })\n                        }\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n\n                GetAllPosts()\n                return\n            }\n        },\n        getPosts({\n            commit\n        }) {\n            let accessInfo = localStorage.getItem('accessInfo')\n\n            if (accessInfo != 'undefined' && accessInfo != null) {\n                accessInfo = JSON.parse(accessInfo)\n                HTTP.get('posts', {\n                        headers: {\n                            'Authorization': 'Bearer ' + accessInfo.token,\n                        }\n                    })\n                    .then(response => {\n                        commit('SET_Posts', response.data)\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n            }\n        },\n\n\n\n    },\n    getters: {\n        getPost: state => state.post,\n        getPosts: state => state.posts.sort((a, b) => b.id - a.id),\n        getStep: state => state.step,\n    },\n}"]},"metadata":{},"sourceType":"module"}