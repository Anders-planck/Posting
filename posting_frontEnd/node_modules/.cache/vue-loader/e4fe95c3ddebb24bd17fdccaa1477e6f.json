{"remainingRequest":"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!/Users/anders/Desktop/work/Vue/Posting-app/node_modules/cache-loader/dist/cjs.js??ruleSet[0].rules[0].use[0]!/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!/Users/anders/Desktop/work/Vue/Posting-app/src/components/connection/Form.vue?vue&type=template&id=2670a5d6&scoped=true&","dependencies":[{"path":"/Users/anders/Desktop/work/Vue/Posting-app/src/components/connection/Form.vue","mtime":1634942569288},{"path":"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/cache-loader/dist/cjs.js","mtime":1630480667405},{"path":"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js","mtime":1630480667143},{"path":"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/cache-loader/dist/cjs.js","mtime":1630480667405},{"path":"/Users/anders/Desktop/work/Vue/Posting-app/node_modules/@vue/vue-loader-v15/lib/index.js","mtime":1630480667143}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}